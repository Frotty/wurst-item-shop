package ItemShopMenu
import TableLayout
import HashMap
import SoundUtils
import ClosureTimers
import LinkedList
import public ItemShopIcon
import RecipeItem
import ItemShop
import HashSet

constant itemShopOpenSound = new SoundDefinition(Sounds.bigButtonClick)

constant PADDINGX = 0.0175
constant PADDINGY = 0.0125
constant ICON_SPACING = 0.0015
constant SECTION_TOP_SPACING = 0.0045
constant SECTION_BOTTOM_SPACING = 0.0025

public class ItemShop
  private var targets = new HashMap<player, unit>
  private var buyers = new HashSet<player>
  private var items = new LinkedList<ItemIcon>

  private var tableLayout = new TableLayout(ITEM_SHOP_WIDTH, ITEM_SHOP_HEIGHT)
  private var currentRowItems = 0

  constant itemShopFrame = createFrame("FRAME", "itemShopFrame", getFrame("ConsoleUIBackdrop", 0), "", 0)
  private constant itemShopBackdrop = createFrame("ItemShopBackdrop", itemShopFrame, 0, 1) // Context is 1 cuz same name uses hero pick menu.

  construct()
    itemShopFrame
    ..setSize(ITEM_SHOP_WIDTH, ITEM_SHOP_HEIGHT)
    ..setAbsPoint(FRAMEPOINT_TOP, vec2(ITEM_SHOP_X_POS, ITEM_SHOP_Y_POS))

    itemShopBackdrop.setAllPoints(itemShopFrame)
    itemShopFrame.hide()

    tableLayout.padding = padding(PADDINGY, 0, PADDINGY, PADDINGX)
    tableLayout.applyTo(itemShopFrame)

    doPeriodically(0.5) cb ->
      buyers.forEach() (_player) ->
        checkBuyability(_player)

  function setPlayerTarget(player p, unit target)
    targets.put(p, target)

  function toggleView(player p)
    if buyers.has(p)
      hideForPlayer(p)
    else
      showToPlayer(p)

  function checkBuyability(player p)
    let gold = p.getGold()
    let lumber = p.getLumber()
    items.forEach(icon -> icon.checkBuyability(p, gold, lumber))

  function showToPlayer(player buyer)
    buyers.add(buyer)
    itemShopFrame.show(buyer)
    checkBuyability(buyer)
    checkShopPos(buyer)

  function showToUnit(unit buyer)
    let owner = buyer.getOwner()
    buyers.add(owner)
    targets.put(owner, buyer)
    itemShopFrame.show(owner)
    checkBuyability(owner)
    checkShopPos(owner)

  function checkShopPos(player p)
    if localPlayer == p
      let screenRatio = BlzGetLocalClientWidth() / BlzGetLocalClientHeight()
      let xPos = screenRatio < 1.61 ? 0.6 : 0.8
      let vecPos = vec2(xPos, 0.53)
      itemShopFrame
      ..setAbsPoint(FRAMEPOINT_TOP, vecPos)

  function hideForUnit(unit buyer)
    buyers.remove(buyer.getOwner())
    itemShopFrame.hide(buyer.getOwner())

  function hideForPlayer(player buyer)
    buyers.remove(buyer)
    itemShopFrame.hide(buyer)

  function addSection(string title)
    tableLayout
    ..row()
    ..add(p(title))..padTop(SECTION_TOP_SPACING)..padBot(SECTION_BOTTOM_SPACING)
    ..row()

    currentRowItems = 0

    layout()

  function layout()
    tableLayout.layout()

  function addRecipe(ItemRecipe recipeDef)
    let icon = new ItemIcon(itemShopFrame, targets)
    icon.setupRecipe(recipeDef)
    items.add(icon)

    tableLayout..add(icon.getIconFrame())..padRight(ICON_SPACING)..padBot(ICON_SPACING)
    currentRowItems++
    if currentRowItems > ITEM_SHOP_ITEMS_PER_ROW
      tableLayout.row()
      currentRowItems = 0

    layout()

  function addItem(RecipeItem itemDef)
    let icon = new ItemIcon(itemShopFrame, targets)
    icon.setupItem(itemDef)
    items.add(icon)

    tableLayout..add(icon.getIconFrame())..padRight(ICON_SPACING)..padBot(ICON_SPACING)
    currentRowItems++
    if currentRowItems > ITEM_SHOP_ITEMS_PER_ROW
      tableLayout.row()
      currentRowItems = 0

    layout()


init
  loadTOCFile("itemshop.toc")

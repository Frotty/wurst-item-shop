package ItemShopMenu
import FramehandleNames
import HashMap
import SoundUtils
import ClosureTimers
import LinkedList
import public ItemShopIcon
import RecipeItem
import ClosureFrames

constant itemShopOpenSound = new SoundDefinition(Sounds.bigButtonClick)

public class ItemShop
  private var buyers = new IterableMap<player, unit>
  private var items = new LinkedList<ItemIcon>

  private constant PADDINGX = 0.0200
  private constant PADDINGY = 0.0150
  private constant HORIZONTAL_SPACING = 0.0255
  private constant VERTICAL_SPACING = -0.0375
  private constant SECTION_SPACING = -0.0125
  private constant ITEM_ICON_INITIAL_POSITION = vec2(PADDINGX, -PADDINGY)
  private constant MAX_ICONS_PER_ROW = 7

  private var currentVertSpacing = 0.
  private var currentRowItems = 0

  constant itemShopFrame = createFrame("FRAME", "itemShopFrame", getFrame("ConsoleUIBackdrop", 0), "", 0)
  private constant itemShopBackdrop = createFrame("ItemShopBackdrop", itemShopFrame, 0, 1) // Context is 1 cuz same name uses hero pick menu.
  
  private constant tabButton1 = createFrame("TabButton", itemShopFrame, 0, 0)
  private constant tabButton2 = createFrame("TabButton", itemShopFrame, 0, 1)
  private constant tabButton3 = createFrame("TabButton", itemShopFrame, 0, 2)
  private constant radioGroup = new LinkedList<framehandle>
  ..add(tabButton1)
  ..add(tabButton2)
  ..add(tabButton3)

  construct()
    itemShopFrame
    ..setSize(0.245, 0.365)
    ..setAbsPoint(FRAMEPOINT_TOP, vec2(0.8, 0.53))

    tabButton1..setPoint(FRAMEPOINT_BOTTOMLEFT, itemShopFrame, FRAMEPOINT_TOPLEFT)
    ..setText("Tab1")
    ..disable()
    ..onClick() -> 
      toggleTabs(tabButton1)
    tabButton2..setPoint(FRAMEPOINT_LEFT, tabButton1, FRAMEPOINT_RIGHT)
    ..setText("Tab2")
    ..onClick() -> 
      toggleTabs(tabButton2)
    tabButton3..setPoint(FRAMEPOINT_LEFT, tabButton2, FRAMEPOINT_RIGHT)
    ..setText("Tab3")
    ..onClick() -> 
      toggleTabs(tabButton3)

    itemShopBackdrop.setAllPoints(itemShopFrame)
    itemShopFrame.hide()

    doPeriodically(0.5) cb ->
      buyers.forEach() (_player, value) ->
        checkBuyability(_player)

  function toggleTabs(framehandle clickedTab)
    clickedTab.disable()

    radioGroup.forEach() (framehandle tab) ->
      if tab != clickedTab
        tab.enable()
      
  function toggleView(player p, unit u)
    if buyers.has(p)
      hideForPlayer(p)
    else
      showToUnit(u)

  function checkBuyability(player p)
    let gold = p.getGold()
    items.forEach(icon -> icon.checkBuyability(p, gold))

  function showToPlayer(player buyer)
    buyers.put(buyer, null)
    itemShopFrame.show(buyer)
    checkBuyability(buyer)

  function showToUnit(unit buyer)
    let owner = buyer.getOwner()
    buyers.put(owner, buyer)
    itemShopFrame.show(owner)
    checkBuyability(owner)

  function hideForUnit(unit buyer)
    buyers.remove(buyer.getOwner())
    itemShopFrame.hide(buyer.getOwner())

  function hideForPlayer(player buyer)
    buyers.remove(buyer)
    itemShopFrame.hide(buyer)

  function addSection(string title)
    if currentRowItems > 0
      currentVertSpacing += VERTICAL_SPACING
      currentRowItems = 0

    new ShopSection(itemShopFrame, title, currentInsertPos())

    currentVertSpacing += SECTION_SPACING

  function currentInsertPos() returns vec2
    return ITEM_ICON_INITIAL_POSITION + vec2(currentRowItems * HORIZONTAL_SPACING, currentVertSpacing)


  function addRecipe(ItemRecipe recipeDef)
    let icon = new ItemIcon(itemShopFrame, buyers)
    icon.setupRecipe(recipeDef)
    items.add(icon)

    icon.setIconPosition(itemShopFrame, currentInsertPos())
    currentRowItems++
    if currentRowItems > MAX_ICONS_PER_ROW
      currentVertSpacing += VERTICAL_SPACING
      currentRowItems = 0

  function addItem(RecipeItem itemDef)
    let icon = new ItemIcon(itemShopFrame, buyers)
    icon.setupItem(itemDef)
    items.add(icon)

    icon.setIconPosition(itemShopFrame, currentInsertPos())
    currentRowItems++
    if currentRowItems > MAX_ICONS_PER_ROW
      currentVertSpacing += VERTICAL_SPACING
      currentRowItems = 0


init
  nullTimer() ->
    let success = BlzLoadTOCFile("itemshop.toc")
    if not success
      print("TOC files could not be loaded")

class ShopSection
  framehandle itemText

  construct(framehandle parent, string name, vec2 pos)
    itemText = createFrame(FramehandleTypeNames.text, "itemText", parent, "", GetRandomInt(0, 1000000))
    ..setText(name)
    ..setTextColor(colorA(255, 255, 255, 1))
    ..setPoint(FRAMEPOINT_TOPLEFT, parent, FRAMEPOINT_TOPLEFT, pos)

package ItemShopTest
import ItemShopMenu
import ClosureTimers
import ToggleShopButton
import UnitIds
import RecipeItem
import Icons
import Execute
import ClosureEvents

constant SWORD_ITEM = compiletime(new RecipeItem()
  ..setName("Cool Sword")
  ..setInterfaceIcon(Icons.bTNSteelMelee)
  ..setGoldCost(120)
  ..addBonus(Bonus.DAMAGE, 10)
  ..generateTooltip("It cuts through enemies.")
)..register()

constant RING_ITEM = compiletime(new RecipeItem()
  ..setName("Cool Ring")
  ..setInterfaceIcon(Icons.bTNRingGreen)
  ..setGoldCost(140)
  ..setLumberCost(120)
  ..addBonus(Bonus.ARMOR, 2)
  ..generateTooltip("Looks shiny.")
)..register()

constant ARMOR_ITEM = compiletime(new RecipeItem()
  ..setName("Cool Armor")
  ..setInterfaceIcon(Icons.bTNSteelArmor)
  ..setLumberCost(160)
  ..addBonus(Bonus.LIFE, 100)
  ..generateTooltip("Pretty cool.")
)..register()

constant SUPER_ARMOR_ITEM = compiletime(new RecipeItem()
  ..setName("Super Armor")
  ..addBonus(Bonus.LIFE, 150)
  ..addBonus(Bonus.ARMOR, 4)
  ..setGoldCost(1260)
  ..setInterfaceIcon(Icons.bTNAdvancedMoonArmor)
)..register()

constant SUPER_ARMOR_RECIPE = new ItemRecipe()
  ..setRequiredItems(RING_ITEM, ARMOR_ITEM)
  ..setResultItem(SUPER_ARMOR_ITEM)

init
  doAfter(0.5) ->
    let shop = new ItemShop()
    ..addSection("Consumables")
    ..addItem(SWORD_ITEM)
    ..addItem(RING_ITEM)
    ..addSection("Basic Items")
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)
    ..addItem(ARMOR_ITEM)

    execute() ->
      shop..addSection("Tier 1 Recipes")
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)

    execute() ->
      shop..addSection("Tier 2 Recipes")
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)
      ..addItem(ARMOR_ITEM)

    new ToggleShopButton(shop, "Shop (L)")
    ..show(players[0])
    ..addHotkeyForPlayer(players[0], OSKEY_L)

    let bm1 = createUnit(players[0], UnitIds.bloodmage, ZERO2, angle(0))
    let bag = createUnit(players[0], UnitIds.paladin, ZERO2, angle(0))

    shop.setPlayerTarget(bm1.getOwner(), bm1)

    EventListener.add(bm1, EVENT_PLAYER_UNIT_SELECTED) ->
      print("set target hero1")
      shop.setPlayerTarget(bm1.getOwner(), bm1)

    EventListener.add(bag, EVENT_PLAYER_UNIT_SELECTED) ->
      print("set target hero2")
      shop.setPlayerTarget(bag.getOwner(), bag)

    players[0].addGold(900)
